// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/weird.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class WeirdBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WeirdBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WeirdBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<Point> createPoint(
    int x,
    int y,
  ) {
    return _createPoint(
      x,
      y,
    );
  }

  late final _createPointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Point> Function(ffi.Int64, ffi.Int64)>>('createPoint');
  late final _createPoint =
      _createPointPtr.asFunction<ffi.Pointer<Point> Function(int, int)>();

  void deletePoint(
    ffi.Pointer<Point> point,
  ) {
    return _deletePoint(
      point,
    );
  }

  late final _deletePointPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Point>)>>(
          'deletePoint');
  late final _deletePoint =
      _deletePointPtr.asFunction<void Function(ffi.Pointer<Point>)>();

  int getPointCount() {
    return _getPointCount();
  }

  late final _getPointCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('getPointCount');
  late final _getPointCount = _getPointCountPtr.asFunction<int Function()>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final WeirdBindings _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Point>)>>
      get deletePoint => _library._deletePointPtr;
}

class Point extends ffi.Struct {
  @ffi.Int64()
  external int x;

  @ffi.Int64()
  external int y;
}
